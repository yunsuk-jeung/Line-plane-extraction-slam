////make vector depth_image
//void loader::create_depth_image_2() {
//    spherical_point temp;
//    spherical_point zero_temp;
//    std::vector <spherical_point> row_temp;
//
//    float pre_pi=0;
//    int size=cloud->points.size();
//    float resolution = 2*M_PI/4500;
//    int delta;
//    int pre_delta=-1;
//
//
//    for (int i=0; i< size; i++) {
//        temp.r = sqrt(pow(cloud->points[i].x, 2) + pow(cloud->points[i].y, 2) + pow(cloud->points[i].z, 2));
//        if(temp.r == 0) {
//            temp.theta = 0;
//            temp.pi = 0;
//        }
//        //// atan2 returns -pi ~ pi --> -a --> 2pi-a
//        if( atan2(cloud->points[i].y , cloud->points[i].x) >=0 ) {
//            temp.theta = acos(cloud->points[i].z / temp.r);
//            temp.pi = atan2(cloud->points[i].y , cloud->points[i].x);
//        }
//        else {
//            temp.theta = acos(cloud->points[i].z / temp.r);
//            temp.pi = 2 * M_PI + atan2(cloud->points[i].y , cloud->points[i].x);
//        }
//        temp.index = i;
//        ////
//        delta = temp.pi/resolution;
//
//        if (delta == pre_delta){
//            row_temp.pop_back();
//        }
//
//        int add =0;
//        while(add < delta-(pre_delta+1)) {
//            row_temp.push_back(zero_temp);
//            add++;
//        }
//        row_temp.push_back(temp);
//        //// last
//            if (  temp.pi-pre_pi < 0){
//                row_temp.pop_back();
//                int add2=0;
//                int add3=0;
//                while(add2 < 4500-(pre_delta+1)) {
//                    row_temp.push_back(zero_temp);
//                    add2++;
//                }
//                spherical_depth_image.push_back(row_temp);
//                row_temp.clear();
//
//                while(add3 < delta){
//                    row_temp.push_back(zero_temp);
//                    add3++;
//                }
//                row_temp.push_back(temp);
//            }
//
//        ////Change pre_pi
//        if(atan2(cloud->points[i].y , cloud->points[i].x) >= 0) {
//            pre_pi = atan2(cloud->points[i].y, cloud->points[i].x);
//        }
//        else{
//            pre_pi = 2*M_PI + atan2(cloud->points[i].y, cloud->points[i].x);
//        }
//
//        pre_delta = delta;
//    }
//
//    int add2=0;
//    while(add2 < 4500-(pre_delta+1)) {
//        row_temp.push_back(zero_temp);
//        add2++;
//    }
//    spherical_depth_image.push_back(row_temp);
//}
